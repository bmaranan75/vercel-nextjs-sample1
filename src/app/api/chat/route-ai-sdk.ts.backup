import { streamText, tool } from 'ai';
import { openai } from '@ai-sdk/openai';
import { NextRequest } from 'next/server';
import { getSession } from '@auth0/nextjs-auth0';
import { getProducts, addToCart, getCartWithProducts } from '../../../lib/shopping-store';
import { withAsyncCheckoutConfirmation } from '../../../lib/auth0-ai';
import { asyncCheckoutTool } from '../../../lib/tools/async-checkout';
import { getUser } from '../../../lib/auth0';
import { z } from 'zod';

export const POST = async (req: NextRequest) => {
  try {
    const { messages } = await req.json();
    const session = await getSession();
    const user = await getUser();

    const systemMessage = `You are a helpful AI assistant with access to weather, calendar, and online shopping functions.

SHOPPING COMMANDS:
- "show products" or "list products" → Use list_products to display all available grocery items
- "add [product] to cart" → Use add_to_cart with the exact product ID from the product list
- "show cart" or "view cart" → Use view_cart to display current cart contents
- "checkout" → Use async_checkout to complete the purchase with user authorization

SHOPPING INSTRUCTIONS:
1. When users ask to ADD items to cart, use add_to_cart with the product ID immediately
2. When users ask to SEE products or BROWSE, use list_products to show available items
3. For adding items to cart, use the EXACT product ID (like 1, 2, 3, etc.) from the products list
4. Always confirm successful cart additions with a friendly message
5. Display cart contents in a clear table format with product names, prices, and quantities
6. When checking out, explain that you will send a push notification for authorization

OTHER FUNCTIONS:
- get_weather: Get current weather for any city
- get_calendar: View calendar events (requires user authorization)

Be helpful, friendly, and respond directly to what the user is asking for without unnecessary steps.`;

    const tools = {
      get_weather: tool({
        description: 'Get current weather information for a specific city',
        parameters: z.object({
          city: z.string().describe('The city name to get weather for')
        }),
        execute: async ({ city }) => {
          try {
            if (!process.env.OPENWEATHER_API_KEY) {
              return '❌ Weather API key not configured.';
            }

            const response = await fetch(
              `https://api.openweathermap.org/data/2.5/weather?q=${encodeURIComponent(city)}&appid=${process.env.OPENWEATHER_API_KEY}&units=metric`
            );

            if (!response.ok) {
              return `❌ Could not find weather data for "${city}".`;
            }

            const data = await response.json();
            const temp = Math.round(data.main.temp);
            const feelsLike = Math.round(data.main.feels_like);
            const humidity = data.main.humidity;
            const description = data.weather[0].description;
            const cityName = data.name;
            const country = data.sys.country;

            return `🌤️ **Weather in ${cityName}, ${country}**

🌡️ **${temp}°C** (feels like ${feelsLike}°C)
💨 **${description}**
💧 **Humidity:** ${humidity}%

*Current conditions*`;
          } catch (error) {
            console.error('Weather API error:', error);
            return '❌ Sorry, I had trouble getting the weather data.';
          }
        }
      }),
      list_products: tool({
        description: 'Display all available products in the store',
        parameters: z.object({}),
        execute: async () => {
          try {
            const products = getProducts();
            
            let response = "Here are all available products in our BRM Sari-Sari Store:\n\n";
            response += "| ID | Product | Description | Price |\n";
            response += "|:---|:--------|:------------|:------|\n";
            
            products.forEach(product => {
              response += `| ${product.id} | **${product.name}** | ${product.description} | $${product.price.toFixed(2)} |\n`;
            });
            
            response += `\n💡 *Use "add [product name] to cart" or "add product ID [number]" to add items!*`;
            
            return response;
          } catch (error) {
            console.error('Product listing error:', error);
            return '❌ Sorry, I had trouble loading the products.';
          }
        }
      }),
      add_to_cart: tool({
        description: 'Add a product to the shopping cart using product ID or product name',
        parameters: z.object({
          productId: z.string().describe('The ID (e.g. "1", "2") or name (e.g. "Milk", "Bread") of the product to add'),
          quantity: z.number().optional().describe('The quantity to add (default: 1)')
        }),
        execute: async ({ productId, quantity = 1 }) => {
          try {
            if (!session?.user?.sub) {
              return '❌ You need to be signed in to add items to cart.';
            }

            const userId = session.user.sub;
            const success = addToCart(userId, productId, quantity);

            if (success) {
              const products = getProducts();
              const product = products.find(p => p.id === productId || p.name.toLowerCase() === productId.toLowerCase());
              const totalCost = (product?.price || 0) * quantity;
              
              return `✅ **Item Added to Cart!**

🛒 **${product?.name}**
├ Quantity: ${quantity}
├ Unit Price: $${product?.price.toFixed(2)}
└ Total: $${totalCost.toFixed(2)}

💡 *Tip: Ask "show my cart" to see all items!*`;
            } else {
              return '❌ Product not found. Please check the product ID.';
            }
          } catch (error) {
            console.error('Add to cart error:', error);
            return '❌ Sorry, I had trouble adding the item to your cart.';
          }
        }
      }),
      view_cart: tool({
        description: 'View the current shopping cart contents',
        parameters: z.object({}),
        execute: async () => {
          try {
            if (!session?.user?.sub) {
              return '❌ You need to be signed in to view your cart.';
            }

            const userId = session.user.sub;
            const cartData = getCartWithProducts(userId);

            if (cartData.items.length === 0) {
              return `🛒 **Your Cart is Empty**

No items in your cart yet. Browse our products and add some items!

💡 *Use "show products" to see what's available.*`;
            }

            let response = "🛒 **Your Shopping Cart**\n\n";
            response += "| Item | Quantity | Unit Price | Subtotal |\n";
            response += "|:-----|:---------|:-----------|:---------|\n";
            
            cartData.items.forEach(item => {
              if (item.product) {
                const subtotal = item.product.price * item.quantity;
                response += `| **${item.product.name}** | ${item.quantity} | $${item.product.price.toFixed(2)} | $${subtotal.toFixed(2)} |\n`;
              }
            });
            
            response += `\n**Total: $${cartData.total.toFixed(2)}**\n\n`;
            response += `💰 Ready to checkout!`;
            
            return response;
          } catch (error) {
            console.error('View cart error:', error);
            return '❌ Sorry, I had trouble accessing your cart.';
          }
        }
      }),
      // Wrap the async checkout tool with Auth0 AI CIBA authorization
      async_checkout: withAsyncCheckoutConfirmation(asyncCheckoutTool)
    };

    const result = await streamText({
      model: openai('gpt-4o-mini'),
      messages: [
        { role: 'system', content: systemMessage },
        ...messages
      ],
      tools,
      maxToolRoundtrips: 2,
      onFinish: ({ toolCalls, usage }) => {
        console.log('Tool calls:', toolCalls);
        console.log('Usage:', usage);
      },
    });

    return result.toDataStreamResponse();

  } catch (error) {
    console.error('Chat API error:', error);
    return new Response('Internal Server Error', { status: 500 });
  }
};
